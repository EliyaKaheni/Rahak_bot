import ast
import telebot
import datetime
from telebot import types
from persiantools.jdatetime import JalaliDate

BOT_ID = 'IWontTellYou'
bot = telebot.TeleBot(BOT_ID)

# Users temp database
users = {128402264: {'Name': 'ایلیا کاهنی', 'Uni': 'دانشگاه تهران', 'Field': 'علوم کامپیوتر', 'League': 'چرخک ⚙️', 'Book':[]}}
cache = {}
users_cache = {}

# Reading class
class Reading:
    book_name = ''
    reading_dates = []
    page = 0

# Leagues
Leagues = ['موشک 🚀', 'چرخک ⚙️']

# Error handler
def error(message):
    bot.send_message(message.chat.id, "ببخشید فکر کنم یه اشتباهی پیش اومده 🤦\n لطفا ربات رو مجددا استارت کن و از اول مراحل رو طی کن. در صورت نیاز هم با ادمین تماس بگیر.")


""" BASIC FUNCTIONS """
def been_before(s, l):
    loc = 0
    if len(l)==0:
        return -1
    for i in l:
        if i.name==s:
            return loc
        loc += 1
    return -1

def my_progress_baby(l_sh, l):
    try:
        if len(l) == 0:
            return 0

        l = sorted(l, reverse=True)

        i = 0
        days = []

        while len(l) > i:
            year, month, day = map(int, l[0].split('-'))
            d = JalaliDate(year, month, day)

            if l_sh - d >= datetime.timedelta(1):
                break

            days.append(l[i])
            i+=1

        return days

    except:
        print('Erorr in my_progress_baby function!')

def last_shanbe():
    try:
        last_shanbeh = JalaliDate.today()
        while(JalaliDate.weekday(last_shanbeh) != 0):
            last_shanbeh -= datetime.timedelta(1)

        return last_shanbeh

    except:
        print('Erorr in last_shanbe function!')

def my_progress(message):
    try:
        global users

        last_shanbeh = last_shanbe()
        days = []

        for book in users[message.chat.id]['Book']:
            l = book.reading_dates
            days = list(set(my_progress_baby(last_shanbeh, l)) | set(days))

        return len(days)

    except:
        error(message)

""" DATABASE MANAGEMENT """
def Read_DataBase(myfile):
    # try:
    with open(f'{myfile}.txt', mode='r') as file:
        content = file.read().strip()
        return ast.literal_eval(content)
    # except:
    #     print('Please check the database, reading problem')

def Write_DataBase(users, myfile):
    try:
        with open(f'{myfile}.txt', mode='w') as file:
            file.write(str(users))

    except:
        print('Please check the database, writing problem')

def add_user_to_database(users_cache, id):
    if users_cache[id]['League'] == 'چرخک ⚙️':
        users = Read_DataBase('Charkhak')
    else:
        users = Read_DataBase('Mooshak')

    users[id]['Name'] = users_cache[id]['Name']
    users[id]['Uni'] = users_cache[id]['Uni']
    users[id]['Field'] = users_cache[id]['Field']
    users[id]['League'] = users_cache[id]['League']
    users[id]['Book'] = users_cache[id]['Book']

    if users_cache[id]['League'] == 'چرخک ⚙️':
        Write_DataBase(users, 'Charkhak')
    else:
        Write_DataBase(users, 'Mooshak')

""" MENUS """

def start_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('بریم برای ثبت نام ✅')
        markup.add(item)
        bot.send_message(message.chat.id, 'بریم برای ثبت نام؟', reply_markup=markup)

    except:
        error(message)

def leagues_menu(message):
    try:
        markup = types.InlineKeyboardMarkup()

        for league in Leagues:
            glass_button = types.InlineKeyboardButton(
                text=league, callback_data=league)

            markup.add(glass_button)

        bot.send_message(
            message.chat.id, 'لیگتون رو انتخاب کنین.', reply_markup=markup)

    except:
        error(message)

def uni_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('دانشگاه شریف')
        item2 = types.KeyboardButton('دانشگاه تهران')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, 'مشغول به تحصیل در کدوم دانشگاهید؟', reply_markup=markup)

    except:
        error(message)

def date_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for i in range(0, 5):
            day = JalaliDate.today() - datetime.timedelta(i)
            item = types.KeyboardButton(str(day))
            markup.add(item)

        bot.send_message(message.chat.id, 'مایل به ثبت کتابخوانی در چه تاریخی هستید؟', reply_markup=markup)

    except:
        error(message)

def main_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('ثبت مطالعه')
        item2 = types.KeyboardButton('جمع آمار خودم')
        item3 = types.KeyboardButton('حذف کتاب')
        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id, 'شما در منوی اصلی قرار دارید', reply_markup=markup)
    except:
        error(message)

def book_menu(message):
    try:
        global users
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if users[message.chat.id]['Book']:
            for book in users[message.chat.id]['Book']:
                item = types.KeyboardButton(book.name)
                markup.add(item)

        add_button = types.KeyboardButton('افزودن کتاب جدید')
        markup.add(add_button)

        bot.send_message(
            message.chat.id, 'کتابی که مطالعه کردین رو انتخاب کنین.', reply_markup=markup)

    except:
        error(message)


"""Sign-up Section"""
# Start handler
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        # Saving the user
        global users_cache
        users_cache[message.chat.id] = {}

        #Setting the menu
        bot.send_message(message.chat.id, 'سلام :) \nبه رهک خوش اومدین. لطفا مراحل ثبت نام رو طی کنین.')

        start_menu(message)

    except:
        error(message)

# Sign-up section
@bot.message_handler(func=lambda message: message.text=='بریم برای ثبت نام ✅')
def signup_1(message):
    try:
        bot.send_message(message.chat.id, 'لطفا نام و نام خانوادگی تون رو وارد کنید')
        bot.register_next_step_handler(message, signup_2)

    except:
        error(message)

def signup_2(message):
    try:
        global users_cache
        name = message.text
        users_cache[message.chat.id]['Name'] = name

        uni_menu(message)
        bot.register_next_step_handler(message, signup_3)

    except:
        error(message)

def signup_3(message):
    try:
        global users_cache
        university = message.text
        users_cache[message.chat.id]['Uni'] = university

        bot.send_message(message.chat.id, 'رشته تحصیلیتون رو بنویسید')
        bot.register_next_step_handler(message, signup_4)

    except:
        error(message)

def signup_4(message):
    try:
        global users_cache
        field = message.text
        users_cache[message.chat.id]['Field'] = field

        bot.send_message(message.chat.id, 'گروه کتابخوانی رهک دوتا لیگ داره که با هم در پایبند بودن به کتابخوانی رقابت میکنن. لیگ موشک و لیگ چرخک.\nموشکی ها انتخاب میکنن که در هفته چهار الی هفت روز مطالعه داشته باشن و چرخکی ها تصمیم دارن در هفته یک الی سه روز مطالعه کنند.')
        leagues_menu(message)
    except:
        error(message)

@bot.callback_query_handler(func=lambda call: True)
def signup_5(call):
    try:
        global users_cache

        if call.data in Leagues:
            bot.answer_callback_query(
                call.id, f'{call.data} :انتخاب شد')
            leagues = call.data
            users_cache[call.message.chat.id]['League'] = leagues

        bot.send_message(call.message.chat.id, 'تبریک میگم شما دیگه عضوی از رهک هستید. به یاد داشته باشید که در صورتی که پونزده روز بدون ثبت هیچ مطالعه ای در گروه عضو باشید، عضویت شما لغو میشه.')
        users_cache[call.message.chat.id]['Book'] = []

        add_user_to_database(users_cache, call.message.chat.id)

        main_menu(call.message)

    except:
        error(call.message)


"""Reading Section"""
@bot.message_handler(func=lambda message: message.text=='ثبت مطالعه')
def date_set(message):
    try:
        date_menu(message)
        bot.register_next_step_handler(message, book_set)

    except:
        error(message)

def book_set(message):
    try:
        global cache
        cache[message.chat.id] = []
        date = message.text
        cache[message.chat.id].append(date)

        book_menu(message)

        bot.register_next_step_handler(message, page_set)

    except:
        error(message)

def page_set(message):
    try:
        global cache
        book_name = message.text
        if book_name != 'افزودن کتاب جدید':
            cache[message.chat.id].append(book_name)

            bot.send_message(message.chat.id, 'چند صفحه مطالعه کرده اید؟')
            bot.register_next_step_handler(message, note_data)
        else:
            bot.send_message(message.chat.id, 'نام کتابی که قصد مطالعه آنرا دارید را بنویسید')
            bot.register_next_step_handler(message, add_book1)

    except:
        error(message)

def add_book1(message):
    try:
        global cache
        book_name = message.text
        cache[message.chat.id].append(book_name)
        bot.send_message(message.chat.id, f'کتاب {book_name} با موفقیت به لیست کتابهای شما اضافه شد. لطفا تعداد صفحه ای از آن را که مطالعه کرده اید، را ارسال کنید.')
        bot.register_next_step_handler(message, note_data)

    except:
        error(message)

def note_data(message):
    # try:
    global cache

    users_charkhak = Read_DataBase('Charkhak')
    users_mooshak = Read_DataBase('Mooshak')
    users = {}
    if message.chat.id in users_charkhak.keys():
        users = users_charkhak
    else:
        users = users_mooshak

    print(users)

    loc = been_before(cache[message.chat.id][1], users[message.chat.id]['Book'])

    if loc == -1:
        temp = Reading()
        temp.reading_dates.append(cache[message.chat.id][0])
        temp.name = cache[message.chat.id][1]
        temp.page += int(message.text)

        users[message.chat.id]['Book'].append(temp)
        del cache[message.chat.id]

    else:
        users[message.chat.id]['Book'][loc].page += int(message.text)
        users[message.chat.id]['Book'][loc].reading_dates.append(cache[message.chat.id][0])

    if users[message.chat.id]['League'] == 'چرخک ⚙️':
        Write_DataBase(users, 'Charkhak')
    else:
        Write_DataBase(users, 'Mooshak')

    main_menu(message)

    # except:
    #     error(message)

@bot.message_handler(func=lambda message: message.text=='جمع آمار خودم')
def indivisual_progress(message):
    global users

    days = my_progress(message)
    bot.send_message(message.chat.id, f'شما در هفته تا کنون {days} روز مطالعه کرده اید.')

@bot.message_handler(func=lambda message: message.text=='حذف کتاب')
def remove_book1(message):
    pass

bot.polling()
