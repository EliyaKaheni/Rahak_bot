import ast
import telebot
import datetime
import pandas as pd
from telebot import types
from persiantools.jdatetime import JalaliDate

BOT_ID = '7047772089:AAGHg_wXHy4hj5BnzTbe2z1Ei_PkcTjts5g'
bot = telebot.TeleBot(BOT_ID)

# Users temp database
cache = {}
users_cache = {}
mooshak_goal = 0
charkhak_goal = 0
admin_id = '128402264'

# Leagues
Leagues = ['موشک 🚀', 'چرخک ⚙️']

# Error handler
def error(message):
    bot.send_message(message.chat.id, "ببخشید فکر کنم یه اشتباهی پیش اومده 🤦\n لطفا ربات رو مجددا استارت کن و از اول مراحل رو طی کن. در صورت نیاز هم با ادمین تماس بگیر.")


""" BASIC FUNCTIONS """
def my_progress_baby(l_sh, l):
    try:
      if len(l) == 0:
          return 0

      l = sorted(l, reverse=True)

      i = 0
      days = []

      while len(l) > i:
          year, month, day = map(int, l[0].split('-'))
          d = JalaliDate(year, month, day)

          if l_sh - d >= datetime.timedelta(1):
              break

          days.append(l[i])
          i+=1

      return days

    except Exception as e:
        print(f'Erorr in my_progress_baby {e}')

def last_shanbe():
    try:
      last_shanbeh = JalaliDate.today()
      while(JalaliDate.weekday(last_shanbeh) != 0):
          last_shanbeh -= datetime.timedelta(1)

      return last_shanbeh

    except Exception as e:
      print(f'Error in last_shanbe : {e}')

def days_read(id, users):
    try:
      last_shanbeh = last_shanbe()
      days = []
      user_books = eval(users.loc[users['ID'] == id	, 'Books'].values[0])
      users_reading = users['Books'].loc[users['ID']==id]
      pages_read_by_person = 0
      for reading in users_reading:
        reading = eval(reading)
        for name, reading_list in reading.items():
          for date, pages in reading_list.items():
              year, month, day = map(int, date.split('-'))
              d = JalaliDate(year, month, day)

              if (last_shanbe() - d >= datetime.timedelta(1)) and (date not in days):
                  break

              days.append(date)

      return len(days)

    except Exception as e:
        print(f'Error in days_read : {e}')
        error(id)

def pages_read(id, users):
  try:
    last_shanbeh = last_shanbe()
    read_pages = 0
    user_books = eval(users.loc[users['ID'] == id	, 'Books'].values[0])
    users_reading = users['Books'].loc[users['ID']==id]
    pages_read_by_person = 0
    for reading in users_reading:
      reading = eval(reading)
      for name, reading_list in reading.items():
        for date, pages in reading_list.items():
            year, month, day = map(int, date.split('-'))
            d = JalaliDate(year, month, day)

            if last_shanbe() - d >= datetime.timedelta(1):
                break

            pages_read_by_person += pages

    return pages_read_by_person

  except Exception as e:
    print(f'Error in pages_read : {e}')
    error(id)

""" DATABASE MANAGEMENT """
def Read_DataBase(myfile):
    try:
        return pd.read_csv(f'{myfile}.csv')

    except:
        print('Please check the database, reading problem')

def Write_DataBase(users, myfile):
    try:
        users.drop(users.columns[users.columns.str.contains(
        'unnamed', case=False)], axis=1, inplace=True)
        users.to_csv(f'{myfile}.csv')

    except:
        print('Please check the database, writing problem')

def add_user_to_database(users_cache, id):
    try:
        if users_cache[id]['League'] == 'چرخک ⚙️':
            users = Read_DataBase('Charkhak')
        else:
            users = Read_DataBase('Mooshak')

        new_user = {'ID':id, 'Name':users_cache[id]['Name'],
        'Uni':users_cache[id]['Uni'], 'Field':users_cache[id]['Field'],
        'League':users_cache[id]['League'], 'Books':users_cache[id]['Book']}

        new_user_df = pd.DataFrame.from_dict(new_user)

        new_user_df.loc[0] = [id, users_cache[id]['Name'], users_cache[id]['Uni'],
        users_cache[id]['Field'], users_cache[id]['League'], users_cache[id]['Book']]

        users = pd.concat([users, new_user_df], ignore_index=True)
        users.reset_index()

        if users_cache[id]['League'] == 'چرخک ⚙️':
            Write_DataBase(users, 'Charkhak')
        else:
            Write_DataBase(users, 'Mooshak')

    except:
        print('Adding user failed.')

""" MENUS """

def start_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('بریم برای ثبت نام ✅')
        markup.add(item)
        bot.send_message(message.chat.id, 'بریم برای ثبت نام؟', reply_markup=markup)

    except Exception as e:
        print(f'Error in start_menu: {e}')
        error(message)

def leagues_menu(message):
    try:
        markup = types.InlineKeyboardMarkup()

        for league in Leagues:
            glass_button = types.InlineKeyboardButton(
                text=league, callback_data=league)

            markup.add(glass_button)

        bot.send_message(
            message.chat.id, 'لیگتون رو انتخاب کنین.', reply_markup=markup)

    except Exception as e:
        print(f'Error in leagues_menu: {e}')
        error(message)

def uni_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('دانشگاه شریف')
        item2 = types.KeyboardButton('دانشگاه تهران')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, 'مشغول به تحصیل در کدوم دانشگاهید؟', reply_markup=markup)

    except Exception as e:
        print(f'Error in uni_menu: {e}')
        error(message)

def date_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for i in range(0, 5):
            day = JalaliDate.today() - datetime.timedelta(i)
            item = types.KeyboardButton(str(day))
            markup.add(item)

        bot.send_message(message.chat.id, 'مایل به ثبت کتابخوانی در چه تاریخی هستید؟', reply_markup=markup)

    except Exception as e:
        print(f'Error in date_menu: {e}')
        error(message)

def main_menu(message):
    try:
        global admin_id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('ثبت مطالعه')
        item2 = types.KeyboardButton('مشاهده آمار')
        item3 = types.KeyboardButton('حذف کتاب')
        item4 = types.KeyboardButton('رهک چیست')
        markup.add(item1, item2)

        if str(message.chat.id) == admin_id:
          item5 = types.KeyboardButton('تعیین هدف')
          markup.add(item5)

        bot.send_message(message.chat.id, 'شما در منوی اصلی قرار دارید', reply_markup=markup)
    except Exception as e:
        print(f'Error in main_menu: {e}')
        error(message)

def book_menu(message):
    try:
        users_charkhak = Read_DataBase('Charkhak')
        users_mooshak = Read_DataBase('Mooshak')

        users = None
        if message.chat.id in users_charkhak['ID'].values:
            users = users_charkhak
        elif message.chat.id in users_mooshak['ID'].values:
            users = users_mooshak
        else:
            bot.send_message(message.chat.id, "کاربر یافت نشد.")
            return

        if len(users.loc[users['ID'] == message.chat.id, 'Books'].values)!=0:
            user_books = eval(users.loc[users['ID'] == message.chat.id, 'Books'].values[0])
        else:
            user_books = {}

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for book in user_books.keys():
            item = types.KeyboardButton(book)
            markup.add(item)

        add_button = types.KeyboardButton('افزودن کتاب جدید')
        markup.add(add_button)

        bot.send_message(message.chat.id, 'کتابی که مطالعه کردین رو انتخاب کنین.', reply_markup=markup)

    except Exception as e:
        print(f'Error in book_menu: {e}')
        error(message)

def delete_book_menu(message):
    try:
      users_charkhak = Read_DataBase('Charkhak')
      users_mooshak = Read_DataBase('Mooshak')

      users = None
      if message.chat.id in users_charkhak['ID'].values:
          users = users_charkhak
      elif message.chat.id in users_mooshak['ID'].values:
          users = users_mooshak
      else:
          bot.send_message(message.chat.id, "کاربر یافت نشد.")
          return

      user_books_str = users.loc[users['ID'] == message.chat.id, 'Books'].values[0]

      if user_books_str:
          user_books = ast.literal_eval(user_books_str)
      else:
          user_books = {}

      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

      for book in user_books.keys():
          item = types.KeyboardButton(book)
          markup.add(item)

      cancel_button = types.KeyboardButton('لغو')
      markup.add(cancel_button)

      bot.send_message(message.chat.id, 'کتابی که می‌خواهید حذف کنید را انتخاب کنید.', reply_markup=markup)
      bot.register_next_step_handler(message, remove_book2)

    except Exception as e:
        print(f'Error in delete_book_menu: {e}')
        error(message)

def stats_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('آمار پیشرفت خودم')
        item2 = types.KeyboardButton('آمار پیشرفت لیگ')
        item3 = types.KeyboardButton('هدف جمعی')

        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id, 'در منوی مشاهده آمار قرار دارید.', reply_markup=markup)
    except Exception as e:
        print(f'Error in stats_menu: {e}')
        error(message)  

"""Sign-up Section"""
# Start handler
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        global users_cache
        users_cache[message.chat.id] = {}

        bot.send_message(message.chat.id, 'سلام :) \nبه رهک خوش اومدین. لطفا مراحل ثبت نام رو طی کنین.')

        start_menu(message)

    except Exception as e:
      print(f'Error in start: {e}')
      error(message)


# Sign-up section
@bot.message_handler(func=lambda message: message.text=='بریم برای ثبت نام ✅')
def signup_1(message):
    try:
        bot.send_message(message.chat.id, 'لطفا نام و نام خانوادگی تون رو وارد کنید')
        bot.register_next_step_handler(message, signup_2)

    except Exception as e:
      print(f'Error in signup_1: {e}')
      error(message)


def signup_2(message):
    try:
        global users_cache
        name = message.text
        users_cache[message.chat.id]['Name'] = name

        uni_menu(message)
        bot.register_next_step_handler(message, signup_3)

    except Exception as e:
      print(f'Error in signup_2: {e}')
      error(message)


def signup_3(message):
    try:
        global users_cache
        university = message.text
        users_cache[message.chat.id]['Uni'] = university

        bot.send_message(message.chat.id, 'رشته تحصیلیتون رو بنویسید')
        bot.register_next_step_handler(message, signup_4)

    except Exception as e:
      print(f'Error in signup_3: {e}')
      error(message)


def signup_4(message):
    try:
        global users_cache
        field = message.text
        users_cache[message.chat.id]['Field'] = field

        bot.send_message(message.chat.id, 'گروه کتابخوانی رهک دوتا لیگ داره که با هم در پایبند بودن به کتابخوانی رقابت میکنن. لیگ موشک و لیگ چرخک.\nموشکی ها انتخاب میکنن که در هفته چهار الی هفت روز مطالعه داشته باشن و چرخکی ها تصمیم دارن در هفته یک الی سه روز مطالعه کنند.')
        leagues_menu(message)

    except Exception as e:
      print(f'Error in signup_4: {e}')
      error(message)

@bot.callback_query_handler(func=lambda call: True)
def signup_5(call):
    try:
        global users_cache

        if call.data in Leagues:
            bot.answer_callback_query(
                call.id, f'{call.data} :انتخاب شد')
            leagues = call.data
            users_cache[call.message.chat.id]['League'] = leagues

        bot.send_message(call.message.chat.id, 'تبریک میگم شما دیگه عضوی از رهک هستید. به یاد داشته باشید که در صورتی که پونزده روز بدون ثبت هیچ مطالعه ای در گروه عضو باشید، عضویت شما لغو میشه.')
        users_cache[call.message.chat.id]['Book'] = {}

        add_user_to_database(users_cache, call.message.chat.id)

        main_menu(call.message)

    except Exception as e:
      print(f'Error in signup_5: {e}')
      error(call.message)


"""Reading Section"""
@bot.message_handler(func=lambda message: message.text=='ثبت مطالعه')
def date_set(message):
    try:
        date_menu(message)
        bot.register_next_step_handler(message, book_set)

    except Exception as e:
      print(f'Error in date_set: {e}')
      error(message)

def book_set(message):
    try:
      global cache
      cache[message.chat.id] = []
      date = message.text
      cache[message.chat.id].append(date)

      book_menu(message)

      bot.register_next_step_handler(message, page_set)

    except Exception as e:
      print(f'Error in book_set: {e}')
      error(message)

def page_set(message):
    try:
        global cache
        book_name = message.text
        if book_name != 'افزودن کتاب جدید':
            cache[message.chat.id].append(book_name)

            bot.send_message(message.chat.id, 'چند صفحه مطالعه کرده اید؟')
            bot.register_next_step_handler(message, note_data)
        else:
            bot.send_message(message.chat.id, 'نام کتابی که قصد مطالعه آنرا دارید را بنویسید')
            bot.register_next_step_handler(message, add_book1)

    except Exception as e:
      print(f'Error in page_set: {e}')
      error(message)

def add_book1(message):
    try:
        global cache
        book_name = message.text
        cache[message.chat.id].append(book_name)
        bot.send_message(message.chat.id, f'کتاب {book_name} با موفقیت به لیست کتابهای شما اضافه شد. لطفا تعداد صفحه ای از آن را که مطالعه کرده اید، را ارسال کنید.')
        bot.register_next_step_handler(message, note_data)

    except Exception as e:
      print(f'Error in add_book_1: {e}')
      error(message)

def note_data(message):
    try:
        global cache
        id = int(message.chat.id)

        users_charkhak = Read_DataBase('Charkhak')
        users_mooshak = Read_DataBase('Mooshak')

        users = None
        if id in users_charkhak['ID'].values:
            League = 'C'
            users = users_charkhak
        elif id in users_mooshak['ID'].values:
            League = 'M'
            users = users_mooshak
        else:
            bot.send_message(message.chat.id, "کاربر یافت نشد.")
            return


        user_books_str = users.loc[users['ID'] == id, 'Books'].values[0]

        if user_books_str:
            user_books = ast.literal_eval(user_books_str)
        else:
            user_books = {}

        book_name = cache[id][1]
        pages_read = int(message.text)
        date_read = cache[id][0]

        if book_name not in user_books:
            user_books[book_name] = {}
            user_books[book_name][date_read] = pages_read
        else:
            user_books[book_name][date_read] += pages_read

        users.loc[users['ID'] == id, 'Books'] = str(user_books)

        if League == 'C':
            Write_DataBase(users, 'Charkhak')
        else:
            Write_DataBase(users, 'Mooshak')

        del cache[id]
        main_menu(message)

    except Exception as e:
        print(f'Error in note_data: {e}')
        error(message)

@bot.message_handler(func=lambda message: message.text=='مشاهده آمار')
def statistics(message):
  stats_menu(message)


@bot.message_handler(func=lambda message: message.text=='آمار پیشرفت خودم')
def indivisual_progress(message):
    try:
      users_charkhak = Read_DataBase('Charkhak')
      users_mooshak = Read_DataBase('Mooshak')

      users = None
      if message.chat.id in users_charkhak['ID'].values:
          League = 'C'
          users = users_charkhak
      elif message.chat.id in users_mooshak['ID'].values:
          League = 'M'
          users = users_mooshak
      else:
          bot.send_message(message.chat.id, "کاربر یافت نشد.")
          return
      days = days_read(message.chat.id, users)
      bot.send_message(message.chat.id, f'شما در هفته تا کنون {days} روز مطالعه کرده اید.')

    except Exception as e:
      print(f'Error in indivisual_progress: {e}')
      error(message)

@bot.message_handler(func=lambda message: message.text=='آمار پیشرفت لیگ')
def league_progress(message):
  try:
      users_charkhak = Read_DataBase('Charkhak')
      users_mooshak = Read_DataBase('Mooshak')

      users = None
      if message.chat.id in users_charkhak['ID'].values:
          League = 'C'
          users = users_charkhak
      elif message.chat.id in users_mooshak['ID'].values:
          League = 'M'
          users = users_mooshak
      else:
          bot.send_message(message.chat.id, "کاربر یافت نشد.")
          return
      
      reading_days = []
      for person in users['ID']:
          reading_days.append(days_read(person, users))
      
      bot.send_message(message.chat.id, str(reading_days))


  except Exception as e:
      print(f'Error in league_progress: {e}')
      error(message)

@bot.message_handler(func=lambda message: message.text=='حذف کتاب')
def remove_book1(message):
    delete_book_menu(message)

def remove_book2(message):
    try:
        book_to_delete = message.text
        if book_to_delete == 'لغو':
            main_menu(message)
            return

        users_charkhak = Read_DataBase('Charkhak')
        users_mooshak = Read_DataBase('Mooshak')

        users = None
        if message.chat.id in users_charkhak['ID'].values:
            League = 'C'
            users = users_charkhak
        elif message.chat.id in users_mooshak['ID'].values:
            League = 'M'
            users = users_mooshak
        else:
            bot.send_message(message.chat.id, "کاربر یافت نشد.")
            return

        user_books_str = users.loc[users['ID'] == message.chat.id, 'Books'].values[0]

        if user_books_str:
            user_books = ast.literal_eval(user_books_str)
        else:
            bot.send_message(message.chat.id, "کتابی برای حذف یافت نشد.")
            main_menu(message)
            return

        if book_to_delete in user_books:
            del user_books[book_to_delete]
            users.loc[users['ID'] == message.chat.id, 'Books'] = str(user_books)

            if League == 'C':
                Write_DataBase(users, 'Charkhak')
            else:
                Write_DataBase(users, 'Mooshak')

            bot.send_message(message.chat.id, f'کتاب {book_to_delete} با موفقیت حذف شد.')
        else:
            bot.send_message(message.chat.id, 'کتاب در لیست شما یافت نشد.')

        main_menu(message)

    except Exception as e:
        print(f'Error in delete_book: {e}')
        error(message)

@bot.message_handler(func= lambda message: message.text=='تعیین هدف')
def goal_set_1(message):
  try:
    bot.send_message(message.chat.id, 'هدف گروه چرخک را وارد کنید')
    bot.register_next_step_handler(message, goal_set_2)

  except Exception as e:
        print(f'Error in goal_set_1: {e}')
        error(message)

def goal_set_2(message):
  try:
    global charkhak_goal
    charkhak_goal = int(message.text)
    bot.send_message(message.chat.id, 'هدف گروه موشک را وارد کنید')
    bot.register_next_step_handler(message, goal_set_3)

  except Exception as e:
        print(f'Error in goal_set_2: {e}')
        error(message)

def goal_set_3(message):
  try:
    global mooshak_goal, charkhak_goal
    mooshak_goal = int(message.text)
    bot.send_message(message.chat.id, f'اهداف جدید تعیین شد. {mooshak_goal} صفحه برای گروه موشک و {charkhak_goal} صفحه برای گروه چرخک.')
    main_menu(message)

  except Exception as e:
    print(f'Error in goal_set_3: {e}')
    error(message)

@bot.message_handler(func=lambda message: message.text=='هدف جمعی')
def group_goal_situation(message):
  try:
    global charkhak_goal, mooshak_goal

    users_charkhak = Read_DataBase('Charkhak')
    users_mooshak = Read_DataBase('Mooshak')

    users = None
    if message.chat.id in users_charkhak['ID'].values:
        League = 'C'
        users = users_charkhak
    elif message.chat.id in users_mooshak['ID'].values:
        League = 'M'
        users = users_mooshak
    else:
        bot.send_message(message.chat.id, "کاربر یافت نشد.")
        return

    all_group_progress = 0
    for id in users['ID']:
        all_group_progress += pages_read(id, users)

    if League == 'C':
        bot.send_message(message.chat.id, f'{all_group_progress} صفحه از {charkhak_goal} صفحه مطالعه شده است. ')
    else:
        bot.send_message(message.chat.id, f'{all_group_progress} صفحه از {mooshak_goal} صفحه مطالعه شده است. ')

  except Exception as e:
    print(f'Error in group_goal_situation: {e}')
    error(message)

bot.polling()
