import csv
import telebot
import datetime
from telebot import types
from persiantools.jdatetime import JalaliDate

BOT_ID = 'shhhhhhhhh. thats a secret.'
bot = telebot.TeleBot(BOT_ID)

# Users temp database
users = {128402264: {'Name': 'ایلیا کاهنی', 'Uni': 'دانشگاه تهران', 'Field': 'علوم کامپیوتر', 'League': 'چرخک ⚙️', 'Book':[]}}
cache = {}

# Reading class
class Reading:
    book_name = ''
    reading_dates = []
    page = 0
    goal = 0

# Leagues
Leagues = ['موشک 🚀', 'چرخک ⚙️']

# Error handler
def error(message):
    bot.send_message(message.chat.id, "ببخشید فکر کنم یه اشتباهی پیش اومده 🤦\n لطفا ربات رو مجددا استارت کن و از اول مراحل رو طی کن. در صورت نیاز هم با ادمین تماس بگیر.")


""" BASIC FUNCTIONS """
def been_before(s, l):
    loc = 0
    for i in l:
        if i.name==s:
            return loc
        loc += 1
    return -1


""" DATABASE MANAGEMENT """
def Read_DataBase():
    try:
        with open('users.csv', mode='r') as infile:
            reader = csv.reader(infile)
            temp = {rows[0]:[rows[1], rows[2], rows[3]] for rows in reader}

        print(temp)
        return temp

    except:
        print('Please check the database')

def Write_DataBase(users):
    try:
        field_names = ['ID', 'Name', 'University', 'Field', 'Book', 'League']

        with open('users.csv', 'w') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames = field_names)
            writer.writeheader()
            writer.writerows(users)

    except:
        print('Please check the database')


""" MENUS """

def start_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('بریم برای ثبت نام ✅')
        markup.add(item)
        bot.send_message(message.chat.id, 'بریم برای ثبت نام؟', reply_markup=markup)

    except:
        error(message)

def leagues_menu(message):
    try:
        markup = types.InlineKeyboardMarkup()

        for league in Leagues:
            glass_button = types.InlineKeyboardButton(
                text=league, callback_data=league)

            markup.add(glass_button)

        bot.send_message(
            message.chat.id, 'لیگتون رو انتخاب کنین.', reply_markup=markup)

    except:
        error(message)

def uni_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('دانشگاه شریف')
        item2 = types.KeyboardButton('دانشگاه تهران')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, 'مشغول به تحصیل در کدوم دانشگاهید؟', reply_markup=markup)

    except:
        error(message)

def date_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for i in range(0, 5):
            day = JalaliDate.today() - datetime.timedelta(i)
            item = types.KeyboardButton(str(day))
            markup.add(item)

        bot.send_message(message.chat.id, 'مایل به ثبت کتابخوانی در چه تاریخی هستید؟', reply_markup=markup)

    except:
        error(message)

def main_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('ثبت مطالعه')
        item2 = types.KeyboardButton('جمع آمار خودم')
        item3 = types.KeyboardButton('حذف کتاب')
        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id, 'شما در منوی اصلی قرار دارید', reply_markup=markup)
    except:
        error(message)

def book_menu(message):
    try:
        global users
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if users[message.chat.id]['Book']:
            for book in users[message.chat.id]['Book']:
                item = types.KeyboardButton(book.name)
                markup.add(item)

        add_button = types.KeyboardButton('افزودن کتاب جدید')
        markup.add(add_button)

        bot.send_message(
            message.chat.id, 'کتابی که مطالعه کردین رو انتخاب کنین.', reply_markup=markup)

    except:
        error(message)


"""Sign-up Section"""
# Start handler
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        # Saving the user
        global users
        users[message.chat.id] = {}

        #Setting the menu
        bot.send_message(message.chat.id, 'سلام :) \nبه رهک خوش اومدین. لطفا مراحل ثبت نام رو طی کنین.')

        start_menu(message)

    except:
        error(message)

# Sign-up section
@bot.message_handler(func=lambda message: message.text=='بریم برای ثبت نام ✅')
def signup_1(message):
    try:
        bot.send_message(message.chat.id, 'لطفا نام و نام خانوادگی تون رو وارد کنید')
        bot.register_next_step_handler(message, signup_2)

    except:
        error(message)

def signup_2(message):
    try:
        global users
        name = message.text
        users[message.chat.id]['Name'] = name

        uni_menu(message)
        bot.register_next_step_handler(message, signup_3)

    except:
        error(message)

def signup_3(message):
    try:
        global users
        university = message.text
        users[message.chat.id]['Uni'] = university

        bot.send_message(message.chat.id, 'رشته تحصیلیتون رو بنویسید')
        bot.register_next_step_handler(message, signup_4)

    except:
        error(message)

def signup_4(message):
    try:
        global users
        field = message.text
        users[message.chat.id]['Field'] = field

        bot.send_message(message.chat.id, 'گروه کتابخوانی رهک دوتا لیگ داره که با هم در پایبند بودن به کتابخوانی رقابت میکنن. لیگ موشک و لیگ چرخک.\nموشکی ها انتخاب میکنن که در هفته چهار الی هفت روز مطالعه داشته باشن و چرخکی ها تصمیم دارن در هفته یک الی سه روز مطالعه کنند.')
        leagues_menu(message)
    except:
        error(message)

@bot.callback_query_handler(func=lambda call: True)
def signup_5(call):
    try:
        global users

        if call.data in Leagues:
            bot.answer_callback_query(
                call.id, f'{call.data} :انتخاب شد')
            leagues = call.data
            users[call.message.chat.id]['League'] = leagues

        bot.send_message(call.message.chat.id, 'تبریک میگم شما دیگه عضوی از رهک هستید. به یاد داشته باشید که در صورتی که پونزده روز بدون ثبت هیچ مطالعه ای در گروه عضو باشید، عضویت شما لغو میشه.')

        main_menu(call.message)

    except:
        error(call.message)


"""Reading Section"""
@bot.message_handler(func=lambda message: message.text=='ثبت مطالعه')
def date_set(message):
    try:
        date_menu(message)
        bot.register_next_step_handler(message, book_set)

    except:
        error(message)

def book_set(message):
    try:
        global cache
        cache[message.chat.id] = []
        date = message.text
        cache[message.chat.id].append(date)

        book_menu(message)

        bot.register_next_step_handler(message, page_set)

    except:
        error(message)

def page_set(message):
    try:
        global cache
        book_name = message.text
        if book_name != 'افزودن کتاب جدید':
            cache[message.chat.id].append(book_name)

            bot.send_message(message.chat.id, 'چند صفحه مطالعه کرده اید؟')
            bot.register_next_step_handler(message, note_data)
        else:
            bot.send_message(message.chat.id, 'نام کتابی که قصد مطالعه آنرا دارید را بنویسید')
            bot.register_next_step_handler(message, add_book1)

    except:
        error(message)

def add_book1(message):
    try:
        global cache
        book_name = message.text
        cache[message.chat.id].append(book_name)
        bot.send_message(message.chat.id, f'کتاب {book_name} با موفقیت به لیست کتاب های شما اضافه شد. قصد دارید چند صفحه از این کتاب را مطالعه کنید؟')
        bot.register_next_step_handler(message, add_book2)

    except:
        error(message)

def add_book2(message):
    try:
        global cache
        goal = int(message.text)
        cache[message.chat.id].append(goal)
        bot.send_message(message.chat.id, 'چند صفحه از آنرا مطالعه کرده اید و مایل به ثبت آن هستید؟')
        bot.register_next_step_handler(message, note_data)

    except:
        error(message)

def note_data(message):
    try:
        global users, cache

        loc = been_before(cache[message.chat.id][1], users[message.chat.id]['Book'])

        if loc == -1:
            temp = Reading()
            temp.reading_dates.append(cache[message.chat.id][0])
            temp.name = cache[message.chat.id][1]
            temp.page += int(message.text)
            temp.goal = cache[message.chat.id][2]

            users[message.chat.id]['Book'].append(temp)
            del cache[message.chat.id]

        else:
            users[message.chat.id]['Book'][loc].page += int(message.text)
            users[message.chat.id]['Book'][loc].reading_dates.append(cache[message.chat.id][0])

        main_menu(message)

    except:
        error(message)

@bot.message_handler(func=lambda message: message.text=='جمع آمار خودم')
def my_progress(message):
    global users
    goal_sum, read_sum = 0, 0

    for book in users[message.chat.id]['Book']:
        goal_sum += book.goal
        read_sum += book.page

    bot.send_message(message.chat.id, f'شما {read_sum} صفحه از {goal_sum} صفحه که برای آن هدف گذاری کرده اید را مطالعه کرده اید.')

@bot.message_handler(func=lambda message: message.text=='حذف کتاب')
def remove_book1(message):
    pass

bot.polling()
